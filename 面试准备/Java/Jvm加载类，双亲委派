类加载过程：加载、验证、准备、解析、初始化

加载
在加载阶段，虚拟机主要完成三件事：
      1.通过一个类的全限定名来获取定义此类的二进制字节流。
      2.将这个字节流所代表的静态存储结构转化为方法区域的运行时数据结构。
      3.在Java堆中生成一个代表这个类的java.lang.Class对象，作为方法区域数据的访问入口



验证
 验证阶段作用是保证Class文件的字节流包含的信息符合JVM规范，不会给JVM造成危害。如果验证失败，就会抛出一个java.lang.VerifyError异常或其子类异常。验证过程分为四个阶段
     1.文件格式验证：验证字节流文件是否符合Class文件格式的规范，并且能被当前虚拟机正确的处理。
     2.元数据验证：是对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言的规范。
     3.字节码验证：主要是进行数据流和控制流的分析，保证被校验类的方法在运行时不会危害虚拟机。
     4.符号引用验证：符号引用验证发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在解析阶段中发生。

准备
准备阶段为变量分配内存并设置类变量的初始化。在这个阶段分配的仅为类的变量（static修饰的变量），而不包括类的实例变量。对已非final的变量，JVM会将其设置成“零值”，而不是其赋值语句的值：
        pirvate static int size = 12;
        那么在这个阶段，size的值为0，而不是12。 final修饰的类变量将会赋值成真实的值。
解析
解析过程是将常量池内的符号引用替换成直接引用。主要包括四种类型引用的解析。类或接口的解析、字段解析、方法解析、接口方法解析。

初始化
在准备阶段，类变量已经经过一次初始化了，在这个阶段，则是根据程序员通过程序制定的计划去初始化类的变量和其他资源。这些资源有static{}块，构造函数，父类的初始化等。
        至于使用和卸载阶段阶段，这里不再过多说明，使用过程就是根据程序定义的行为执行，卸载由GC完成。
使用
新线程---程序计数器----jvm栈执行（对象引用）-----堆内存（直接引用）----方法区
卸载
GC垃圾回收

2、双亲委派机制、意义、方法

机制
启动（Bootstrap）类加载器----->标准扩展（Extension）类加载器--->系统（System）类加载器---->上下文(Custom)类加载器
从左到右加载：首先将加载任务委托给父类加载器，依次递归，如果父类加载器可以完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。

意义
 防止内存中出现多份同样的字节码 
使用委托机制，会递归的向父类查找，如果类A中引用了类B，Java虚拟机将使用加载类A的类加载器去加载类B，如果A加载器已加载类A，那么B使用A的类加载器进行加载时，就不会在加载类A的字节码了

方法
《1》启动（Bootstrap）类加载器
《2》标准扩展（Extension）类加载器
《3》应用程序类加载器（Application ）
《4》上下文(Custom)类加载器
