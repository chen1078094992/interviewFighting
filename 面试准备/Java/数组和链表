数组结构区别
数组结构在通过索引进行查询数据时效率比较高，而对于数组插入和删除操作，则效率会比较低，在第一个位置进行插入数据，其余数据就需要依次向后移动，而第一个数据进行删除，则需要所有数据全部向前移，这样的话，就会推出第二种结构，链表结构。
简单的链表：为了保证数据插入和删除，不会影响其他数据的移动，保证线性开销，所以就引出了链接。每个表都不会连续进行存储。
链表是由一系列节点组成的，每个节点都会有一个链点，这就是next链，而next链则会执行下一个node的引用，所以我们在插入或者删除的时候，需要该表链表next链的指向地址即可，每个节点不需要内存进行连续存储，这样会减小删除和插入的线性开销。
链表结构主要分为两种链表，单向链表和双向链表 ，即单向链表只有一个next链，而双向链表会有next链和pre链。


数组优于链表的: 
1.内存空间占用的少,因为链表节点会附加上一块或两块下一个节点的信息.但是数组在建立时就固定了.所以也有可能会因为建立的数组过大或不足引起内存上的问题. 
2.数组内的数据可随机访问.但链表不具备随机访问性.这个很容易理解.数组在内存里是连续的空间.比如如果一个数组地址从100到200,且每个元素占用两个字节,那么100-200之间的任何一个偶数都是数组元素的地址.可以直接访问.链表在内存地址可能是分散的.所以必须通过上一节点中的信息找能找到下一个节点. 
3.查找速度上.这个也是因为内存地址的连续性的问题.不罗索了. 
链表优于数组的: 
1.插入与删除的操作.如果数组的中间插入一个元素,那么这个元素后的所有元素的内存地址都要往后移动.删除的话同理.只有对数据的最后一个元素进行插入删除操作时,才比较快.链表只需要更改有必要更改的节点内的节点信息就够了.并不需要更改节点的内存地址. 
2.内存地址的利用率方面.不管你内存里还有多少空间,如果没办法一次性给出数组所需的要空间,那就会提示内存不足,磁盘空间整理的原因之一在这里.而链表可以是分散的空间地址. 
3.链表的扩展性比数组好.因为一个数组建立后所占用的空间大小就是固定的.如果满了就没法扩展.只能新建一个更大空间的数组.而链表不是固定的,可以很方便的扩展.

   数组与链表的优缺点；    
    数组:

    优点：使用方便 ，查询效率 比链表高，内存为一连续的区域 

    缺点：大小固定，不适合动态存储，不方便动态添加
    链表：

     优点：可动态添加删除   大小可变   
     缺点：只能通过顺次指针访问，查询效率低